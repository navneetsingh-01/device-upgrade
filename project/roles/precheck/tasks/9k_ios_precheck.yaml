---
- block:
    - name: Gather facts to check version IOS
      ios_facts:
        gather_subset:
          - min
          - hardware
      register: output

    - name: Show installed boot image version
      debug: msg="{{ ansible_net_image }}"
      when: output is defined

    - name: Assert That It is Running The Desired boot Image
      assert:
        that:
          - "'{{ image.ios.os_dst_filename }}' not in '{{ ansible_net_image }}'"
        success_msg: Device not running target image.
        fail_msg: Device is already running target image.
      ignore_errors: true

    - name: Gather CPU usage and free memory
      ios_command:
        commands:
          - "show processes cpu"
      register: output

    - name: Assert that IOS device can be upgraded
      assert:
        that:
          - '"ios" == "{{ ansible_net_system }}"'
          - 1000 < "{{ ansible_net_memfree_mb | default('1001') }}" | int
        success_msg: Device is in healthy state.
        fail_msg: Device should be manually verified.
      when: ansible_net_memfree_mb is defined

    - name: Device secondary volume name
      ios_command:
        commands:
          - "show file systems"
      register: file_systems_output

    - block:
        - name: Determine if secondary volume name is stby-bootflash
          set_fact: device_secondary_flash="stby-bootflash"
          when: file_systems_output['stdout'][0].find(' stby-bootflash:') != -1

        - name: Determine if secondary volume name is slavebootflash
          set_fact: device_secondary_flash="slavebootflash"
          when: file_systems_output['stdout'][0].find(' slavebootflash:') != -1

        - name: Determine if secondary volume name is flash-2
          set_fact: device_secondary_flash="flash-2"
          when: file_systems_output['stdout'][0].find(' flash-2:') != -1

    - name: debug secondary flash
      debug: msg="{{ device_secondary_flash }}"
      poll: 0
      when: device_secondary_flash is defined

    - name: Check free memory in secondary flash
      ios_command:
        commands:
          - "dir {{ device_secondary_flash }}: | in free"
      when: device_secondary_flash is defined
      register: seconday_flash_space_output

    - name: Intermediate processing...
      set_fact: free_string={{ seconday_flash_space_output['stdout'][0][seconday_flash_space_output['stdout'][0].find('(')+1:] }}

    - name: Intermediate processing...
      set_fact: secondary_flash_memfree={{ free_string[:free_string.find(' ')] }}

    - name: Intermediate processing...
      set_fact: secondary_flash_memfree_mb={{ secondary_flash_memfree | int / 1000000 }}

    - name: Assert that IOS device can be upgraded by checking the free space in secondary flash
      assert:
        that:
          - '"ios" == "{{ ansible_net_system }}"'
          - 1000 < {{ secondary_flash_memfree_mb }}
        success_msg: Device is in healthy state.
        fail_msg: Device should be manually verified.

    - assert:
        that:
          - 85 > "{{ item.split()[-1] | replace('%', '') }}" | int
        success_msg: Device is in healthy state.
        fail_msg: Device should be manually verified.
      loop: "{{ output['stdout'][0].split('\n') }}"
      when: "'five minutes:' in item"

    - name: Creates directory
      file:
        path: "prechecks/{{ inventory_hostname }}"
        state: directory
      when: output is defined
      run_once: true

    - name: Remove existing file if it exists
      file:
        path: "precheck_{{ inventory_hostname }}.txt"
        state: absent
      when: output is defined

    - name: Creates file
      file:
        path: "precheck_{{ inventory_hostname }}.txt"
        state: touch
      when: output is defined

    - name: IOS run commands and capture
      include_role:
        name: command_capture
      vars:
        command: "{{ item.cmd }}"
        file_name: "{{ item.file }}"
        device_type: ios
        check_type: pre
      loop: "{{ check_commands.ios }}"
